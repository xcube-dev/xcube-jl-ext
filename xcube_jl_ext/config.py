import importlib.metadata
import json
from pathlib import Path

import jupyter_core.paths


# Note: as we are storing runtime information here, we should use
#
data_path = Path("~").expanduser() / ".xcube" / "jupyterlab"
lab_info_path = data_path / "lab-info.json"
lab_url_key = "lab_url"
has_proxy_key = "has_proxy"

server_info_file = data_path / "server-info.json"

server_log_file = Path.cwd() / "xcube-server.log"
server_config_file = Path.cwd() / "xcube-server.yaml"

default_server_port = 9192

default_server_config = """
# xcube server configuration file generated by 
# xcube JupyterLab extension (xcube-jl-ext).
# For more options run "xcube serve --show configschema".

DataStores:
  - Identifier: root
    StoreId: file
    StoreParams:
      root: .    
      # max_depth: 1
      # includes: []
      # excludes: []
      

  # Uncomment to add datasets from S3-filesystems, such as AWS S3:
    
  #- Identifier: your-store-id
  #  StoreId: s3
  #  StoreParams:
  #    root: your-s3-bucket
  #    # max_depth: 1
  #    # includes: []
  #    # excludes: []
  #    storage_options:
  #      # Set to true for public buckets
  #      anon: false
  #      # Not required if anon=false. 
  #      # For AWS, you can also set env var AWS_ACCESS_KEY_ID.
  #      key: your_s3_access_key_id
  #      # Not required if anon=false. 
  #      # For AWS, you can also set env var AWS_SECRET_ACCESS_KEY.
  #      secret: your_s3_secret_access_key    
  #      # Only use, if you do NOT use AWS:
  #      client_kwargs: 
  #        endpoint_url: your_s3_endpoint_url    

"""


def is_jupyter_server_proxy_enabled() -> bool:
    """Check if the Jupyter server extension "jupyter-server-proxy"
     is installed and enabled."""

    # Is it installed?
    try:
        importlib.metadata.version("jupyter-server-proxy")
    except importlib.metadata.PackageNotFoundError:
        return False

    # Is it installed?
    is_installed = False
    for labext_dir in jupyter_core.paths.jupyter_path("labextensions",
                                                      "@jupyterlab",
                                                      "server-proxy"):
        if Path(labext_dir).is_dir():
            is_installed = True
            break
    if not is_installed:
        return False

    # Now check whether it is disabled.
    is_disabled = False
    for config_dir in jupyter_core.paths.jupyter_config_path():
        page_config_file = Path(config_dir) / "labconfig" / "page_config.json"
        # File page_config.json will only exist,
        # if @jupyterlab/server-proxy has been disabled once.
        if page_config_file.is_file():
            with page_config_file.open() as fp:
                page_config = json.load(fp)
            try:
                is_disabled = page_config.get("disabledExtensions", {}) \
                    .get("@jupyterlab/server-proxy", False)
                break
            except AttributeError:
                pass

    return not is_disabled
